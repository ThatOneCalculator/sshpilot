Metadata-Version: 2.2
Name: sshPilot
Version: 1.0.0
Summary: SSH connection manager with integrated terminal, tunneling, key management, and resource monitoring
Home-page: https://github.com/mfat/sshpilot
Author: mFat
Author-email: newmfat@gmail.com
License: GPL-3.0
Project-URL: Bug Reports, https://github.com/mfat/sshpilot/issues
Project-URL: Source, https://github.com/mfat/sshpilot
Project-URL: Documentation, https://github.com/mfat/sshpilot/blob/main/docs/
Keywords: ssh terminal connection manager gtk adwaita
Platform: Linux
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: X11 Applications :: GTK
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Internet
Classifier: Topic :: System :: Networking
Classifier: Topic :: System :: Systems Administration
Classifier: Topic :: Terminals
Classifier: Topic :: Utilities
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pygobject>=3.42
Requires-Dist: paramiko>=3.4
Requires-Dist: pyyaml>=6.0
Requires-Dist: secretstorage>=3.3
Requires-Dist: cryptography>=42.0
Requires-Dist: matplotlib>=3.8
Provides-Extra: dev
Requires-Dist: black>=23.0; extra == "dev"
Requires-Dist: flake8>=6.0; extra == "dev"
Requires-Dist: mypy>=1.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0; extra == "dev"
Requires-Dist: pytest>=7.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx-rtd-theme>=1.2; extra == "docs"
Requires-Dist: sphinx>=6.0; extra == "docs"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: platform
Dynamic: project-url
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# sshPilot

[![Build Status](https://github.com/mfat/sshpilot/workflows/Build%20DEB%20and%20RPM%20Packages/badge.svg)](https://github.com/mfat/sshpilot/actions)
[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)
[![Python 3.10+](https://img.shields.io/badge/python-3.10+-blue.svg)](https://www.python.org/downloads/)

A modern SSH connection manager with integrated terminal, built with GTK4 and libadwaita following GNOME Human Interface Guidelines.

![sshPilot Screenshot](screenshots/main-window.png)

## Features

### üöÄ Core Features
- **Modern GTK4/libadwaita Interface** - Clean, responsive design following GNOME HIG
- **Integrated VTE Terminal** - Full-featured terminal with tabbed interface
- **SSH Connection Management** - Save, organize, and manage SSH connections
- **Secure Password Storage** - Passwords stored safely in system keyring
- **SSH Config Integration** - Reads and writes standard `~/.ssh/config` format

### üîê Security & Authentication
- **SSH Key Management** - Generate, deploy, and manage SSH keys
- **Multiple Auth Methods** - Support for password, key-based, and SSH agent authentication
- **SSH Agent Integration** - Seamless integration with ssh-agent
- **Secure Storage** - No passwords stored in plain text

### üåê Advanced SSH Features
- **SSH Tunneling** - Local, remote, and dynamic port forwarding
- **X11 Forwarding** - Run GUI applications on remote hosts
- **Connection Profiles** - Organize connections with custom nicknames
- **Auto-detection** - Automatically discover SSH keys in `~/.ssh/`

### üìä Monitoring & Management
- **Resource Monitoring** - Real-time CPU, memory, disk, and network charts
- **Connection Status** - Visual indicators for connection state
- **Terminal Themes** - Multiple color schemes and font customization
- **Drag & Drop** - Reorder connections easily

### ‚å®Ô∏è Productivity Features
- **Keyboard Shortcuts** - Efficient workflow with comprehensive shortcuts
- **Split View** - Side-by-side terminal sessions
- **Tab Management** - Multiple connections in tabs with close buttons
- **Quick Connect** - Double-click or Enter to connect

## Installation

### Flatpak (Recommended)

```bash
flatpak install flathub io.github.mfat.sshpilot
```

### Debian/Ubuntu

Download the latest `.deb` package from [releases](https://github.com/mfat/sshpilot/releases):

```bash
sudo dpkg -i sshpilot_1.0.0-1_all.deb
sudo apt-get install -f  # Install dependencies if needed
```

### Fedora/RHEL/CentOS

Download the latest `.rpm` package from [releases](https://github.com/mfat/sshpilot/releases):

```bash
sudo dnf install sshpilot-1.0.0-1.noarch.rpm
```

### From Source

#### Prerequisites

- Python 3.10 or newer
- GTK 4.6 or newer
- libadwaita 1.2 or newer
- VTE 0.70 or newer (GTK4 version)

#### Build Dependencies

**Debian/Ubuntu:**
```bash
sudo apt install python3-dev python3-pip python3-gi \
    libgtk-4-dev libadwaita-1-dev libvte-2.91-gtk4-dev \
    gir1.2-gtk-4.0 gir1.2-adw-1 gir1.2-vte-2.91-gtk4 \
    meson ninja-build
```

**Fedora:**
```bash
sudo dnf install python3-devel python3-pip python3-gobject \
    gtk4-devel libadwaita-devel vte291-gtk4-devel \
    meson ninja-build
```

#### Installation

```bash
git clone https://github.com/mfat/sshpilot.git
cd sshpilot
pip install -r requirements.txt
python setup.py install --user
```

Or using Meson:

```bash
meson setup build
meson compile -C build
meson install -C build
```

## Usage

### Getting Started

1. Launch sshPilot from your application menu or run `sshpilot` in terminal
2. Click the **+** button or press **Ctrl+N** to add a new connection
3. Fill in connection details (hostname, username, authentication method)
4. Double-click the connection or press **Enter** to connect

### Keyboard Shortcuts

| Shortcut | Action |
|----------|--------|
| `Ctrl+N` | New Connection |
| `Ctrl+L` | Toggle Connection List Focus |
| `Ctrl+Shift+K` | Generate SSH Key |
| `Ctrl+R` | Show Resource Monitor |
| `Ctrl+,` | Preferences |
| `Ctrl+Q` | Quit Application |
| `Enter` | Connect to Selected Host |

### SSH Key Management

1. Press **Ctrl+Shift+K** or use the menu to open key generator
2. Choose key type (RSA or Ed25519), size, and optional passphrase
3. Keys are saved to `~/.ssh/` and can be deployed to remote hosts
4. Use the connection dialog to select key files for authentication

### Resource Monitoring

1. Connect to a host and press **Ctrl+R**
2. View real-time charts for CPU, memory, disk usage, and network I/O
3. Historical data is kept for analysis
4. Monitoring can be enabled/disabled in preferences

### SSH Tunneling

Configure tunnels in the connection dialog:

- **Local Forward**: Access remote services locally (`-L` option)
- **Remote Forward**: Expose local services remotely (`-R` option)  
- **Dynamic Forward**: SOCKS proxy for web browsing (`-D` option)

## Configuration

### Settings Location

- **Linux**: `~/.config/sshpilot/` (JSON) or GSettings
- **SSH Config**: `~/.ssh/config` (standard format)
- **Passwords**: System keyring (GNOME Keyring, KDE Wallet, etc.)

### Terminal Themes

Built-in themes:
- Default
- Dark
- Light  
- Solarized Dark
- Solarized Light

Custom themes can be created in preferences.

## Development

### Project Structure

```
sshPilot/
‚îú‚îÄ‚îÄ src/io.github.mfat.sshpilot/    # Python package
‚îÇ   ‚îú‚îÄ‚îÄ main.py                      # Application entry point
‚îÇ   ‚îú‚îÄ‚îÄ window.py                    # Main window
‚îÇ   ‚îú‚îÄ‚îÄ connection_manager.py        # SSH connection handling
‚îÇ   ‚îú‚îÄ‚îÄ terminal.py                  # VTE terminal widget
‚îÇ   ‚îú‚îÄ‚îÄ config.py                    # Configuration management
‚îÇ   ‚îú‚îÄ‚îÄ resource_monitor.py          # System monitoring
‚îÇ   ‚îú‚îÄ‚îÄ key_manager.py               # SSH key management
‚îÇ   ‚îú‚îÄ‚îÄ ui/                          # GTK UI files
‚îÇ   ‚îî‚îÄ‚îÄ resources/                   # Icons and resources
‚îú‚îÄ‚îÄ data/                            # Desktop files and metadata
‚îú‚îÄ‚îÄ debian/                          # Debian packaging
‚îú‚îÄ‚îÄ docs/                            # Documentation
‚îî‚îÄ‚îÄ tests/                           # Unit tests
```

### Building

#### Development Setup

```bash
git clone https://github.com/mfat/sshpilot.git
cd sshpilot
python -m venv venv
source venv/bin/activate
pip install -r requirements.txt
pip install -e .
```

#### Running Tests

```bash
pytest tests/
```

#### Code Quality

```bash
black src/
flake8 src/
mypy src/
```

### Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Make your changes and add tests
4. Run the test suite and linting
5. Commit your changes (`git commit -m 'Add amazing feature'`)
6. Push to the branch (`git push origin feature/amazing-feature`)
7. Open a Pull Request

Please read [CONTRIBUTING.md](CONTRIBUTING.md) for detailed guidelines.

## Architecture

### Core Components

- **MainWindow**: Primary UI with connection list and tab management
- **ConnectionManager**: SSH configuration, authentication, and connection handling
- **TerminalWidget**: VTE-based terminal with SSH integration
- **ResourceMonitor**: System resource monitoring via SSH commands
- **KeyManager**: SSH key generation, deployment, and management
- **Config**: Settings management with GSettings/JSON backends

### Design Principles

- **Separation of Concerns**: Clear separation between UI and business logic
- **Signal-Based Architecture**: Loose coupling through GObject signals
- **Async Operations**: Non-blocking SSH operations using threading
- **Security First**: Secure password storage and key management
- **Extensible**: Plugin-ready architecture for future enhancements

## Troubleshooting

### Common Issues

**Connection fails with "Permission denied":**
- Check username and authentication method
- Verify SSH key permissions (`chmod 600 ~/.ssh/id_rsa`)
- Ensure public key is in remote `~/.ssh/authorized_keys`

**Terminal appears blank:**
- Check SSH connection status in connection list
- Try connecting manually with `ssh` command to test
- Review logs in `~/.local/share/sshPilot/sshpilot.log`

**Resource monitoring not working:**
- Ensure remote host has required commands (`top`, `free`, `df`, `iftop`)
- Check SSH connection stability
- Verify monitoring is enabled in preferences

### Debug Mode

Enable debug logging:

```bash
SSHPILOT_DEBUG=1 sshpilot
```

Logs are written to `~/.local/share/sshPilot/sshpilot.log`

## License

This project is licensed under the GNU General Public License v3.0 - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- **GTK Team** - For the excellent GTK4 toolkit
- **GNOME Project** - For libadwaita and design guidelines  
- **VTE Team** - For the terminal emulator widget
- **Paramiko** - For SSH implementation in Python
- **Contributors** - Everyone who helps improve sshPilot

## Support

- **Issues**: [GitHub Issues](https://github.com/mfat/sshpilot/issues)
- **Discussions**: [GitHub Discussions](https://github.com/mfat/sshpilot/discussions)
- **Email**: [newmfat@gmail.com](mailto:newmfat@gmail.com)

---

Made with ‚ù§Ô∏è by [mFat](https://github.com/mfat)
