name: My Mac Workflow

on:
  push:
    branches: [ "mac" ]
  pull_request:
    branches: [ "mac" ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Homebrew dependencies
        run: |
          echo "[1/4] Installing system packages (GTK stack, VTE, tools)..."
          brew update
          brew install gtk4 libadwaita pygobject3 py3cairo vte3 gobject-introspection adwaita-icon-theme pkg-config glib graphene icu4c sshpass || true
          
          # Set up environment paths
          BREW_PREFIX="$(brew --prefix)"
          echo "BREW_PREFIX=$BREW_PREFIX" >> $GITHUB_ENV
          echo "$BREW_PREFIX/bin" >> $GITHUB_PATH

      - name: Create Python virtual environment and install dependencies
        run: |
          echo "[2/4] Creating Python virtualenv (with system-site-packages) and installing deps..."
          python3 -m venv .venv --system-site-packages
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Patch secretstorage for macOS compatibility
        run: |
          echo "[3/4] Ensuring macOS-friendly secret storage fallback..."
          source .venv/bin/activate
          if ! python -c "import secretstorage" >/dev/null 2>&1; then
            if grep -q "^import secretstorage$" sshpilot/connection_manager.py 2>/dev/null; then
              echo "Patching secretstorage import for macOS..."
              python - <<'PY'
          from pathlib import Path
          p = Path('sshpilot/connection_manager.py')
          s = p.read_text()
          s = s.replace('import secretstorage', 'try:\n    import secretstorage\nexcept Exception:\n    secretstorage = None')
          p.write_text(s)
          print('Patched', p)
          PY
            fi
          fi

      - name: Set up runtime environment
        run: |
          echo "[4/4] Setting up runtime environment..."
          BREW_PREFIX="$(brew --prefix)"
          echo "DYLD_FALLBACK_LIBRARY_PATH=$BREW_PREFIX/opt/gtk4/lib:$BREW_PREFIX/opt/glib/lib:$BREW_PREFIX/opt/vte3/lib:$BREW_PREFIX/opt/icu4c/lib:$BREW_PREFIX/opt/graphene/lib:$BREW_PREFIX/lib" >> $GITHUB_ENV
          echo "GI_TYPELIB_PATH=$BREW_PREFIX/lib/girepository-1.0" >> $GITHUB_ENV
          echo "XDG_DATA_DIRS=$BREW_PREFIX/share" >> $GITHUB_ENV

      - name: Test application launch
        run: |
          echo "Testing application launch..."
          source .venv/bin/activate
          
          # Set runtime environment
          export DYLD_FALLBACK_LIBRARY_PATH="$BREW_PREFIX/opt/gtk4/lib:$BREW_PREFIX/opt/glib/lib:$BREW_PREFIX/opt/vte3/lib:$BREW_PREFIX/opt/icu4c/lib:$BREW_PREFIX/opt/graphene/lib:$BREW_PREFIX/lib"
          export GI_TYPELIB_PATH="$BREW_PREFIX/lib/girepository-1.0"
          export XDG_DATA_DIRS="$BREW_PREFIX/share"
          
          # Test import and basic functionality (without GUI)
          python -c "
          import sys
          sys.path.insert(0, '.')
          try:
              import gi
              gi.require_version('Gtk', '4.0')
              from gi.repository import Gtk
              print('✓ GTK4 import successful')
              
              # Test app imports
              from sshpilot.main import main
              print('✓ sshpilot imports successful')
              
              print('✓ Application setup completed successfully')
          except Exception as e:
              print(f'✗ Error: {e}')
              sys.exit(1)
          "

      - name: Build application bundle (optional)
        run: |
          echo "Creating application bundle structure..."
          source .venv/bin/activate
          
          # Create a simple app bundle structure for distribution
          mkdir -p dist/sshpilot-mac
          
          # Copy application files
          cp -r sshpilot dist/sshpilot-mac/
          cp run.py dist/sshpilot-mac/
          cp requirements.txt dist/sshpilot-mac/
          
          # Create run script
          cat > dist/sshpilot-mac/run-sshpilot.sh <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail
          
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          cd "$SCRIPT_DIR"
          
          # Check if virtual environment exists
          if [[ ! -d .venv ]]; then
            echo "Setting up Python environment..."
            python3 -m venv .venv --system-site-packages
            source .venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
          else
            source .venv/bin/activate
          fi
          
          # Set up macOS environment
          BREW_PREFIX="$(brew --prefix)"
          export DYLD_FALLBACK_LIBRARY_PATH="$BREW_PREFIX/opt/gtk4/lib:$BREW_PREFIX/opt/glib/lib:$BREW_PREFIX/opt/vte3/lib:$BREW_PREFIX/opt/icu4c/lib:$BREW_PREFIX/opt/graphene/lib:$BREW_PREFIX/lib"
          export GI_TYPELIB_PATH="$BREW_PREFIX/lib/girepository-1.0"
          export XDG_DATA_DIRS="$BREW_PREFIX/share"
          
          # Launch application
          exec python run.py
          EOF
          chmod +x dist/sshpilot-mac/run-sshpilot.sh
          
          # Create README
          cat > dist/sshpilot-mac/README.md <<'EOF'
          # sshPilot for macOS
          
          ## Prerequisites
          
          Install required system dependencies via Homebrew:
          ```bash
          brew install gtk4 libadwaita pygobject3 py3cairo vte3 gobject-introspection adwaita-icon-theme pkg-config glib graphene icu4c sshpass
          ```
          
          ## Running
          
          Simply execute the run script:
          ```bash
          ./run-sshpilot.sh
          ```
          
          The first run will set up a Python virtual environment and install dependencies.
          EOF

      - name: Create distribution archive
        run: |
          cd dist
          tar -czf sshpilot-macos-$(date +%Y%m%d-%H%M%S).tar.gz sshpilot-mac/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sshpilot-macos-bundle
          path: dist/sshpilot-macos-*.tar.gz
          retention-days: 30
