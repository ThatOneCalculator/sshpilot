name: Gemini Build macOS Application

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "mac" branch
  push:
    branches: [ "mac" ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-macos:
    # The type of runner that the job will run on
    runs-on: macos-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up the Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Step 3: Cache Homebrew dependencies to speed up builds
      - name: Cache Homebrew packages
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/Homebrew
          key: ${{ runner.os }}-brew-${{ hashFiles('.github/workflows/gemini-build-mac.yml') }}
          restore-keys: |
            ${{ runner.os }}-brew-

      # Step 4: Install system-level dependencies via Homebrew
      - name: Install Dependencies via Homebrew
        run: |
          brew install python3 gtk4 libadwaita pygobject3 py3cairo vte3 gobject-introspection adwaita-icon-theme pkg-config glib graphene icu4c sshpass

      # Step 5: Install Python application dependencies
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          # Install only essential dependencies to avoid numpy/matplotlib universal binary issues
          pip install paramiko cryptography secretstorage pygobject keyring
          pip install pyinstaller
          # Verify numpy/matplotlib are not installed
          pip list | grep -E "(numpy|matplotlib)" || echo "Good: numpy/matplotlib not installed"

      # Step 5.5: Patch secretstorage for macOS compatibility
      - name: Patch secretstorage for macOS
        run: |
          if ! python -c "import secretstorage" >/dev/null 2>&1; then
            if grep -q "^import secretstorage$" sshpilot/connection_manager.py 2>/dev/null; then
              echo "Patching secretstorage import for macOS..."
              python - <<'PY'
          from pathlib import Path
          p = Path('sshpilot/connection_manager.py')
          s = p.read_text()
          s = s.replace('import secretstorage', 'try:\n    import secretstorage\nexcept Exception:\n    secretstorage = None')
          p.write_text(s)
          print('Patched', p)
          PY
            fi
          fi

      # Step 6: Set up environment and build app bundle
      - name: Build macOS App Bundle
        run: |
          # Set up environment for PyInstaller
          export BREW_PREFIX="$(brew --prefix)"
          export GI_TYPELIB_PATH="$BREW_PREFIX/lib/girepository-1.0"
          export DYLD_FALLBACK_LIBRARY_PATH="$BREW_PREFIX/opt/gtk4/lib:$BREW_PREFIX/opt/glib/lib:$BREW_PREFIX/opt/vte3/lib:$BREW_PREFIX/opt/icu4c/lib:$BREW_PREFIX/opt/graphene/lib:$BREW_PREFIX/lib"
          export XDG_DATA_DIRS="$BREW_PREFIX/share"
          
          # Debug: Check what Python packages are available
          echo "Installed Python packages:"
          pip list
          
          # Build app bundle for native architecture (no universal binary)
          pyinstaller --clean sshPilot.spec

      # Step 7: Package the.app bundle into a zip archive for easier download
      - name: Archive the application bundle
        run: |
          cd dist
          zip -r sshpilot-macos.zip sshpilot.app

      # Step 8: Upload the final artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sshpilot-macos-app
          path: dist/sshpilot-macos.zip