name: Gemini Build macOS Application

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "mac" branch
  push:
    branches: [ "mac" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-macos:
    # The type of runner that the job will run on
    runs-on: macos-13

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: mac

      # Step 2: Set up the Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Step 3: Cache Homebrew dependencies to speed up builds
      - name: Cache Homebrew packages
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/Homebrew
          key: ${{ runner.os }}-brew-${{ hashFiles('.github/workflows/gemini-build-mac.yml') }}
          restore-keys: |
            ${{ runner.os }}-brew-

      # Step 4: Install system-level dependencies via Homebrew
      - name: Install Dependencies via Homebrew
        run: |
          brew install gtk4 libadwaita pygobject3 py3cairo vte3 gobject-introspection adwaita-icon-theme pkg-config glib graphene icu4c sshpass
          # Get Homebrew prefix (different on Intel vs ARM64)
          BREW_PREFIX=$(brew --prefix)
          echo "Homebrew prefix: $BREW_PREFIX"
          # Get Python version from GitHub Actions Python (not Homebrew)
          PYTHON_VERSION=$(python -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
          echo "Python version: $PYTHON_VERSION"
          # Export for later steps
          echo "BREW_PREFIX=$BREW_PREFIX" >> $GITHUB_ENV
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV

      # Step 5: Install Python application dependencies
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          # Install only essential dependencies to avoid numpy/matplotlib universal binary issues
          # Note: pygobject will be provided by Homebrew (universal binary)
          pip install paramiko cryptography secretstorage keyring
          pip install pyinstaller
          # Verify numpy/matplotlib are not installed
          pip list | grep -E "(numpy|matplotlib)" || echo "Good: numpy/matplotlib not installed"
          # Set up environment for Homebrew PyGObject using dynamic paths
          export PYTHONPATH="$BREW_PREFIX/lib/python$PYTHON_VERSION/site-packages:$PYTHONPATH"
          echo "Checking PyGObject availability:"
          python -c "import sys; sys.path.insert(0, '$BREW_PREFIX/lib/python$PYTHON_VERSION/site-packages'); import gi; print('PyGObject available')" || echo "PyGObject not found"

      # Step 5.5: Patch secretstorage for macOS compatibility
      - name: Patch secretstorage for macOS
        run: |
          if ! python -c "import secretstorage" >/dev/null 2>&1; then
            if grep -q "^import secretstorage$" sshpilot/connection_manager.py 2>/dev/null; then
              echo "Patching secretstorage import for macOS..."
              python - <<'PY'
          from pathlib import Path
          p = Path('sshpilot/connection_manager.py')
          s = p.read_text()
          s = s.replace('import secretstorage', 'try:\n    import secretstorage\nexcept Exception:\n    secretstorage = None')
          p.write_text(s)
          print('Patched', p)
          PY
            fi
          fi

      # Step 6: Set up environment and build app bundle
      - name: Build macOS App Bundle
        run: |
          # Set up environment for PyInstaller
          export BREW_PREFIX="$(brew --prefix)"
          export GI_TYPELIB_PATH="$BREW_PREFIX/lib/girepository-1.0"
          export DYLD_FALLBACK_LIBRARY_PATH="$BREW_PREFIX/opt/gtk4/lib:$BREW_PREFIX/opt/glib/lib:$BREW_PREFIX/opt/vte3/lib:$BREW_PREFIX/opt/icu4c/lib:$BREW_PREFIX/opt/graphene/lib:$BREW_PREFIX/lib"
          export XDG_DATA_DIRS="$BREW_PREFIX/share"
          
          # Debug: Check what Python packages are available
          echo "Installed Python packages:"
          pip list
          
          # Generate PyInstaller spec file dynamically
          cat > sshpilot-dynamic.spec << 'EOF'
          # -*- mode: python ; coding: utf-8 -*-
          import os
          import subprocess
          
          # Get Homebrew prefix dynamically
          try:
              brew_prefix = subprocess.check_output(['brew', '--prefix']).decode().strip()
          except:
              brew_prefix = '/opt/homebrew'  # Default for Apple Silicon
          
          a = Analysis(
              ['run.py'],
              pathex=[],  # Don't include PyGObject path - use system installation
              binaries=[
                  # Minimal binary inclusions - let system provide GTK libraries
              ],
              datas=[
                  # Include essential GTK data files
                  (f'{brew_prefix}/share/glib-2.0/schemas', 'share/glib-2.0/schemas'),
                  (f'{brew_prefix}/share/icons', 'share/icons'),
                  (f'{brew_prefix}/lib/girepository-1.0', 'lib/girepository-1.0'),
              ],
              hiddenimports=[
                  'paramiko',
                  'cryptography',
                  'secretstorage',
                  'keyring',
              ],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=[
                  'PIL', 'Pillow', 'matplotlib', 'numpy', 'matplotlib.*', 'numpy.*', '_cffi_backend',
                  'gi', 'gi.*', 'PyGObject', 'pygobject', '_gi', '_gi_cairo'
              ],
              noarchive=False,
              optimize=0,
          )
          
          pyz = PYZ(a.pure)
          
          exe = EXE(
              pyz,
              a.scripts,
              [],
              exclude_binaries=True,
              name='sshPilot',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=False,
              console=False,
              disable_windowed_traceback=False,
              argv_emulation=True,
              target_arch=None,  # Build for native architecture only
              codesign_identity=None,
              entitlements_file=None,
          )
          
          coll = COLLECT(
              exe,
              a.binaries,
              a.datas,
              strip=False,
              upx=False,
              upx_exclude=[],
              name='sshPilot',
          )
          
          app = BUNDLE(
              coll,
              name='sshpilot.app',
              icon=None,
              bundle_identifier='io.github.mfat.sshpilot',
              info_plist={
                  'NSPrincipalClass': 'NSApplication',
                  'NSAppleScriptEnabled': False,
                  'CFBundleDocumentTypes': [],
                  'NSHighResolutionCapable': True,
                  'LSMinimumSystemVersion': '10.15.0',
                  'NSRequiresAquaSystemAppearance': False,
              },
          )
          EOF
          
          # Set up environment for PyGObject using dynamic Homebrew prefix
          export PYTHONPATH="$BREW_PREFIX/lib/python3.12/site-packages:$PYTHONPATH"
          export GI_TYPELIB_PATH="$BREW_PREFIX/lib/girepository-1.0"
          export DYLD_LIBRARY_PATH="$BREW_PREFIX/lib:$DYLD_LIBRARY_PATH"
          
          # Build app bundle for native architecture (x86_64 on macos-13)
          pyinstaller --clean sshpilot-dynamic.spec
          
          # Create a launcher script that sets up PyGObject environment
          cat > dist/sshpilot.app/Contents/MacOS/sshpilot_launcher << EOF
          #!/bin/bash
          
          # Get the directory where this script is located
          SCRIPT_DIR="\$(cd "\$(dirname "\${BASH_SOURCE[0]}")" && pwd)"
          APP_DIR="\$(dirname "\$(dirname "\$SCRIPT_DIR")")"
          
          # Set up environment for PyGObject with dynamic paths
          export BREW_PREFIX="\$(brew --prefix 2>/dev/null || echo "/usr/local")"
          export PYTHONPATH="\$BREW_PREFIX/lib/python$PYTHON_VERSION/site-packages:\$PYTHONPATH"
          export GI_TYPELIB_PATH="\$BREW_PREFIX/lib/girepository-1.0"
          export DYLD_LIBRARY_PATH="\$BREW_PREFIX/lib:\$DYLD_LIBRARY_PATH"
          export XDG_DATA_DIRS="\$BREW_PREFIX/share:\$XDG_DATA_DIRS"
          
          # Debug: Show environment
          echo "BREW_PREFIX: \$BREW_PREFIX"
          echo "PYTHONPATH: \$PYTHONPATH"
          echo "Checking for PyGObject..."
          python3 -c "import sys; sys.path.insert(0, '\$BREW_PREFIX/lib/python$PYTHON_VERSION/site-packages'); import gi; print('PyGObject found')" || echo "PyGObject not found"
          
          # Run the actual application
          exec "\$SCRIPT_DIR/sshPilot" "\$@"
          EOF
          
          # Make launcher script executable
          chmod +x dist/sshpilot.app/Contents/MacOS/sshpilot_launcher
          
          # Update Info.plist to use launcher script
          /usr/libexec/PlistBuddy -c "Set :CFBundleExecutable sshpilot_launcher" dist/sshpilot.app/Contents/Info.plist

      # Step 7: Package the.app bundle into a zip archive for easier download
      - name: Archive the application bundle
        run: |
          cd dist
          zip -r sshpilot-macos.zip sshpilot.app

      # Step 8: Upload the final artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-intel-app-pyinstaller
          path: dist/sshpilot-macos.zip
